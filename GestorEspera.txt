O QUE UM GESTOR BANCÁRIO VAI QUERER VER FUNCIONANDO
Cadastro de agências:
O gestor quer ver que é possível cadastrar agências com coordenadas X/Y, que os dados são persistidos e auditáveis.

Consulta de distâncias:
O sistema deve calcular corretamente a distância entre o usuário e todas as agências cadastradas, ordenando do mais próximo ao mais distante.

Cache eficiente:
O gestor espera que o sistema utilize cache (Redis/Caffeine) para acelerar consultas, com renovação automática e fallback para banco de dados.

Segurança:
Autenticação obrigatória (JWT/OAuth2), proteção contra SQL Injection/XSS, e headers de segurança OWASP.

Performance:
Respostas rápidas (P95 < 100ms), métricas expostas (Actuator), e logs auditáveis com correlation ID.

Resiliência:
Health check detalhado, tolerância a falhas de cache, e consistência de dados.

2. PREOCUPAÇÕES DE UM BANCO AO ADQUIRIR O SISTEMA
Compliance e Segurança:
O sistema precisa ser seguro, auditável, e estar em conformidade com LGPD, PCI DSS, e padrões OWASP.

Escalabilidade e Performance:
Capacidade de atender múltiplas requisições simultâneas, uso eficiente de cache, e performance consistente.

Integridade dos Dados:
Garantia de que os dados de agências e distâncias são corretos, sem duplicidade ou corrupção.

Observabilidade:
Logs estruturados, métricas detalhadas, e rastreabilidade de requisições (correlation ID).

Facilidade de Integração:
API REST bem documentada, fácil de integrar com sistemas legados e canais digitais.

Resiliência Operacional:
Sistema deve continuar operando mesmo com falhas parciais (ex: cache fora do ar).

3. PERGUNTAS ESTRATÉGICAS SOBRE O DESAFIO
O sistema impede cadastro duplicado de agências?
O cálculo de distância é preciso e auditável?
O cache é invalidado corretamente após 5 minutos?
O sistema responde rápido mesmo sob carga?
Todos os endpoints exigem autenticação?
O sistema é resiliente a falhas de cache/banco?
Logs e métricas são facilmente acessíveis para auditoria?
O sistema bloqueia tentativas de SQL Injection/XSS?
O sistema suporta coordenadas globais (não só Brasil)?
O deploy é automatizável (CI/CD, Docker, K8s)?
4. ROTEIRO DE VALIDAÇÃO EXECUTIVA (SEQUÊNCIA IDEAL)
FASE 1: TESTES MANUAIS NO TERMINAL (PowerShell)
Pré-requisitos:

Sistema rodando (mvn spring-boot:run ou via Docker)
Redis ativo
Banco de dados operacional
Usuário admin cadastrado
1. Obter token JWT


$body = '{"username":"admin","password":"geobank123"}'
$response = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/auth/login" -Method POST -Body $body -ContentType "application/json"
$token = $response.token

2. Cadastrar agências (4 exemplos)

$headers = @{Authorization = "Bearer $token"; "Content-Type" = "application/json"}
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX":-23.5505,"posY":-46.6333}'
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX":-23.5489,"posY":-46.6388}'
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX":-23.5475,"posY":-46.6361}'
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX":-23.5729,"posY":-46.6435}'

3. Consultar distâncias (usuário em Faria Lima)

$response1 = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875" -Method GET -Headers $headers
$response2 = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875" -Method GET -Headers $headers
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/actuator/metrics/cache.gets" -Method GET -Headers $headers

4. Validar cache (miss/hit)

$response1 = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875" -Method GET -Headers $headers
$response2 = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875" -Method GET -Headers $headers
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/actuator/metrics/cache.gets" -Method GET -Headers $headers

5. Testar coordenadas extremas e SQL Injection

Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX":-90.0,"posY":-180.0}'
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/desafio/cadastrar" -Method POST -Headers $headers -Body '{"posX\":\"; DROP TABLE branches; --\",\"posY\":0}'

6. Health check e métricas

Invoke-RestMethod -Uri "http://localhost:8080/api/v1/actuator/health" -Method GET -Headers $headers
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/actuator/metrics/http.server.requests" -Method GET -Headers $headers
Invoke-RestMethod -Uri "http://localhost:8080/api/v1/actuator/caches" -Method GET -Headers $headers

FASE 2: TESTES AUTOMATIZADOS NO POSTMAN
Coleção sugerida:

Login (obter JWT)

POST /api/v1/auth/login
Body: { "username": "admin", "password": "geobank123" }
Extrair token para variável global.
Cadastro de agências

POST /api/v1/desafio/cadastrar
Body: { "posX": -23.5505, "posY": -46.6333 }
Headers: Authorization: Bearer {{token}}
Repetir para as demais agências.
Consulta de distâncias

GET /api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875
Headers: Authorization: Bearer {{token}}
Validar ordenação e valores.
Validação de cache

GET /api/v1/desafio/distancia?posX=-23.5745&posY=-46.6875 (duas vezes)
GET /api/v1/actuator/metrics/cache.gets
Testes de segurança

POST /api/v1/desafio/cadastrar
Body: { "posX": "'; DROP TABLE branches; --", "posY": 0 }
Espera status 400.
Coordenadas extremas

POST /api/v1/desafio/cadastrar
Body: { "posX": -90.0, "posY": -180.0 }
Espera status 200.
Health check e métricas

GET /api/v1/actuator/health
GET /api/v1/actuator/metrics/http.server.requests
GET /api/v1/actuator/caches
5. RESUMO FINAL
Demonstração ao vivo:
Siga a sequência acima, alternando entre terminal e Postman, mostrando logs, métricas, e respostas em tempo real.
Validação executiva:
Todos os fluxos críticos (cadastro, consulta, cache, segurança, métricas) devem funcionar sem erro, com respostas rápidas e logs auditáveis.
Cobertura:
O roteiro cobre 100% dos requisitos do desafio, incluindo preocupações reais de um gestor bancário.

