name: GeoBank CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    JAVA_VERSION: "17"
    MAVEN_OPTS: "-Xmx3072m"

jobs:
    build-and-test:
        name: Build and Unit Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Build with Maven
              working-directory: ./geobank-api
              run: mvn clean compile -DskipTests

            - name: Run unit tests
              working-directory: ./geobank-api
              run: mvn test

            - name: Generate test coverage report
              working-directory: ./geobank-api
              run: mvn jacoco:report

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  files: ./geobank-api/target/site/jacoco/jacoco.xml
                  flags: unittests
                  name: codecov-geobank

    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: build-and-test

        services:
            postgres:
                image: postgis/postgis:16-3.4
                env:
                    POSTGRES_DB: geobank_test
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Run integration tests
              working-directory: ./geobank-api
              run: mvn verify -DskipUnitTests
              env:
                  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/geobank_test
                  SPRING_DATASOURCE_USERNAME: test
                  SPRING_DATASOURCE_PASSWORD: test
                  SPRING_DATA_REDIS_HOST: localhost
                  SPRING_DATA_REDIS_PORT: 6379

    security-scan:
        name: Security Analysis
        runs-on: ubuntu-latest
        needs: build-and-test

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Run OWASP Dependency Check
              working-directory: ./geobank-api
              run: mvn org.owasp:dependency-check-maven:check

            - name: Run Snyk security scan
              uses: snyk/actions/maven@master
              continue-on-error: true
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high

            - name: Upload security reports
              uses: actions/upload-artifact@v4
              with:
                  name: security-reports
                  path: |
                      ./geobank-api/target/dependency-check-report.html

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: build-and-test

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Cache SonarCloud packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Run SonarCloud analysis
              working-directory: ./geobank-api
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  mvn sonar:sonar \
                    -Dsonar.projectKey=geobank-santander \
                    -Dsonar.organization=santander \
                    -Dsonar.host.url=https://sonarcloud.io

    docker-build:
        name: Docker Build and Push
        runs-on: ubuntu-latest
        needs: [integration-tests, security-scan, code-quality]
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Build JAR
              working-directory: ./geobank-api
              run: mvn package -DskipTests

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: santander/geobank
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-
                      type=semver,pattern={{version}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./geobank-api
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      BUILD_DATE=${{ github.event.head_commit.timestamp }}
                      VCS_REF=${{ github.sha }}

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: docker-build
        if: github.ref == 'refs/heads/main'
        environment:
            name: staging
            url: https://staging.geobank.santander.com

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Deploy to Kubernetes
              uses: azure/k8s-deploy@v4
              with:
                  manifests: |
                      k8s/staging/deployment.yml
                      k8s/staging/service.yml
                  images: |
                      santander/geobank:${{ github.sha }}
                  namespace: geobank-staging
